[package]
name = "project-z"
version = "0.1.0"
edition = "2021"
description = "an ~MMO~RPG game made with Bevy"
publish = false

[dependencies]
# A Utility for loading assets in Bevy, with support for 3D assets.
bevy_asset_loader = { version = "0.22", features = ["3d"] }
# Motion Controller
bevy-tnua = { version = "0.20.0", default-features = false }
# Avian3D Integration layer with Bevy Tnua for 3D physics
bevy-tnua-avian3d = { version = "0.1.1", default-features = false }

# Development utilities
bevy_editor_pls = { version = "0.10", optional = true }

# Winit and Image are used here mainly to set up the window icon.
# See: https://bevy-cheatbook.github.io/window/icon.html#setting-the-window-icon
winit = "0.30.5"
image = { version = "0.25", default-features = false, features = ["png"] }

# Bevy's dependencies do a lot of trace logging that isn't relevant for an end user.
# To improve your runtime performance, added that
# It'll turn off detailed log levels on compile time so that they don't need
# to be filtered out while your app is running.
log = { version = "*", features = ["max_level_debug"] }
tracing = { version = "*", features = ["max_level_debug"] }
serde = { version = "1.0", features = ["derive"] }
# Utility crates
strum = { version = "0.26", features = ["derive"] }
thiserror = { version = "^1" }

# Disable default features for Bevy to reduce compile times.
[dependencies.bevy]
version = "0.14"
default-features = false
features = [
  # Enable AccessKit on Windows backend.
  # "accesskit_windows",
  # Enable AccessKit on Unix backends (currently only works with experimental screen readers and forks.)
  # "accesskit_unix",

  # Enable using a shared stdlib for cxx on Android
  # "android_shared_stdcxx",

  # Enable animation support, and glTF animation loading
  "animation",
  # Enables the built-in asset processor for processed assets.
  # "asset_processor", # Enabled in dev profile

  # Use async-io’s implementation of block_on instead of futures-lite’s implementation.
  # This is preferred if your application uses async-io.
  # "async-io",

  # Basis Universal compressed texture support
  # "basis-universal",

  # Provides asset functionality
  "bevy_asset",
  # Provides audio functionality
  # "bevy_audio",

  # Provides shared color types and operations
  "bevy_color",
  # Provides cameras and other basic render pipeline features
  "bevy_core_pipeline",
  # Adds gamepad support
  "bevy_gilrs",
  # Adds support for rendering gizmos
  "bevy_gizmos",
  # glTF support
  "bevy_gltf",
  # Adds PBR rendering
  "bevy_pbr",
  # Provides rendering capability
  "bevy_render",
  # Provides scene capability
  "bevy_scene",
  # Provides sprite capability
  "bevy_sprite",
  # Enable built in global state machines
  "bevy_state",
  # Provides text capability
  "bevy_text",
  # A custom ECS-driven UI framework
  "bevy_ui",
  # winit window and input backend
  "bevy_winit",
  # Include a default font containing only ASCII characters at the cost of a 20kB binary size increase.
  "default_font", # TODO: Remove this if we goig to use custom font

  # DDS compressed texture support
  # "dds",

  # HDR image format support
  # "hdr",

  # JPEG image format support
  # "jpeg",

  # KTX2 compressed texture support
  "ktx2",
  # Enables multithreaded parallelism in the engine. Disabling it forces all engine tasks to run on a single thread.
  "multi_threaded",
  # MP3 audio format support
  # "mp3",

  # PNG image format support
  "png",
  # Enable serialization support through serde
  "serialize",
  # Include SMAA Look Up Tables KTX2 Files
  "smaa_luts",
  # Enables system information diagnostic plugin
  "sysinfo_plugin",
  # Include tonemapping Look Up Tables KTX2 files.
  # If everything is pink, you need to enable this feature or change the Tonemapping method on your Camera2dBundle or Camera3dBundle.
  "tonemapping_luts",
  # OGG/VORBIS audio format support
  # "vorbis",

  # WAV audio format support
  # "wav",

  # Wayland display server support
  "wayland",
  # Enable some limitations to be able to use WebGL2.
  # "webgl2",

  # Enable support for WebGPU in Wasm. When enabled, this feature will override the webgl2 feature.
  # "webgpu",

  # Save a trace of all wgpu calls
  # "wgpu_trace",

  # WebP image format support
  # "webp",

  # X11 display server support
  # "x11",

  # For KTX2 supercompression
  "zlib",
  # For KTX2 supercompression
  # "zstd",
]

# Pysicis engine
[dependencies.avian3d]
version = "0.1"
default-features = false
features = ["3d", "bevy_scene", "f32", "parry-f32", "parallel"]

# Input manager
[dependencies.leafwing-input-manager]
version = "0.15"
default-features = false
features = ["asset", "ui", "mouse", "keyboard", "gamepad"]

[build-dependencies]
build-data = "0"

[target.'cfg(windows)'.build-dependencies]
# Windows specific dependencies
embed-resource = "3.0"

[features]
dev = [
  "bevy/dynamic_linking",
  "bevy/file_watcher",
  "bevy/embedded_watcher",
  "bevy/asset_processor",
  "bevy/bevy_dev_tools",
  "avian3d/debug-plugin",
  "bevy_editor_pls",
]
ci = ["bevy/bevy_ci_testing"]

# Enable a small amount of optimization in the dev profile.
[profile.dev]
debug = 0
opt-level = 1
strip = "debuginfo"

# Enable a large amount of optimization in the dev profile for dependencies.
[profile.dev.package."*"]
opt-level = 3

# Enable more optimization in the release profile at the cost of compile time.
[profile.release]
panic = 'abort'
debug = 0
strip = "debuginfo"

# Our distribution profile will be what we ship to players.
# We create it by specifying that it inherits from our release profile, then we'll tune a few more options.
[profile.distribution]
inherits = "release"
# will remove even more debug information, shrinking the size of the binary while making stack traces much less useful.
strip = true
# Do a second optimization pass over the entire program, including dependencies.
# Slows compile times, marginal improvements.
lto = "thin"
# Compile the entire crate as one unit.
# Slows compile times, marginal improvements.
codegen-units = 1

# Optimize for size in the wasm-release profile to reduce load times and bandwidth usage on web.
[profile.wasm-release]
# Default to release profile values.
inherits = "release"
# Optimize with size in mind (also try "z", sometimes it is better).
# Slightly slows compilation times, great improvements to file size and runtime performance.
opt-level = "s"
# Strip all debugging information from the binary to slightly reduce file size.
strip = "debuginfo"
